pipeline {
    agent none
    stages {
        stage('Set Permissions') {
            agent any
            steps {
                script {
                    // Run the chown and chmod commands on the Jenkins host
                    sh 'sudo chown -R jenkins:jenkins /var/lib/jenkins/workspace/spba'
                    sh 'sudo chmod -R 755 /var/lib/jenkins/workspace/spba'
                }
            }
        }

        stage('Docker Build') {
            agent {
                docker {
                    image 'abhishekf5/maven-abhishek-docker-agent:v1'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
                }
            }
            stages {
                stage('Checkout') {
                    steps {
                        sh 'echo passed'
                        git branch: 'master', url: 'https://github.com/GandlaChandu/jenkinsprac.git'
                    }
                }
                stage('Build and Test') {
                    steps {
                        sh 'ls -ltr'
                        // build the project and create a JAR file
                        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                    }
                }
                pipeline {
    agent none
    stages {
        stage('Clean Workspace') {
            agent any
            steps {
                deleteDir() // Clean the workspace
            }
        }

        stage('Set Permissions') {
            agent any
            steps {
                script {
                    // Set ownership and permissions for the workspace directory without sudo
                    sh 'chown -R jenkins:jenkins /var/lib/jenkins/workspace/spba || true'
                    sh 'chmod -R 755 /var/lib/jenkins/workspace/spba || true'
                }
            }
        }

        stage('Docker Build') {
            agent {
                docker {
                    image 'abhishekf5/maven-abhishek-docker-agent:v1'
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
                }
            }
            stages {
                stage('Checkout') {
                    steps {
                        sh 'echo passed'
                        script {
                            // Set ownership and permissions for the .git directory without sudo
                            sh 'chown -R jenkins:jenkins /var/lib/jenkins/workspace/spba/.git || true'
                            sh 'chmod -R 755 /var/lib/jenkins/workspace/spba/.git || true'
                        }
                        git branch: 'master', url: 'https://github.com/GandlaChandu/jenkinsprac.git'
                    }
                }
                stage('Build and Test') {
                    steps {
                        sh 'ls -ltr'
                        // build the project and create a JAR file
                        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                    }
                }

                stage('Static Code Analysis') {
                    environment {
                        SONAR_URL = "http://54.92.188.70:9000"
                    }
                    steps {
                        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                        }
                    }
                }
                stage('Build and Push Docker Image') {
                    environment {
                        DOCKER_IMAGE = "gand


                stage('Static Code Analysis') {
                    environment {
                        SONAR_URL = "http://54.92.188.70:9000"
                    }
                    steps {
                        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                        }
                    }
                }
                stage('Build and Push Docker Image') {
                    environment {
                        DOCKER_IMAGE = "gandlachandu/ultimate-cicd:${BUILD_NUMBER}"
                        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                        REGISTRY_CREDENTIALS = credentials('docker-cred')
                    }
                    steps {
                        script {
                            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                            def dockerImage = docker.image("${DOCKER_IMAGE}")
                            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                                dockerImage.push()
                            }
                        }
                    }
                }
                stage('Remove Old Docker Images') {
                    steps {
                        script {
                            // Get the list of old images excluding the latest one
                            def oldImages = sh(script: "docker images gandlachandu/ultimate-cicd --format '{{.Repository}}:{{.Tag}}' | grep -v '${BUILD_NUMBER}'", returnStdout: true).trim().split("\n")
                            // Remove each old image
                            oldImages.each { image ->
                                sh "docker rmi -f ${image}"
                            }
                        }
                    }
                }
                stage('Update Deployment File') {
                    environment {
                        GIT_REPO_NAME = "jenkinsprac"
                        GIT_USER_NAME = "GandlaChandu"
                    }
                    steps {
                        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                            sh '''
                                git config user.email "chandugandla4092@gmail.com"
                                git config user.name "GandlaChandu"
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git status
                                git add .
                                git status
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git status
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                            '''
                        }
                    }
                }
            }
        }
    }
}
